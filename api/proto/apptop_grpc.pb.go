// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationTopPositionClient is the client API for ApplicationTopPosition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationTopPositionClient interface {
	GetApplicationTopPositions(ctx context.Context, in *GetPositionsRequest, opts ...grpc.CallOption) (*GetPositionsResponse, error)
	GetApplicationTopPositionsStreaming(ctx context.Context, opts ...grpc.CallOption) (ApplicationTopPosition_GetApplicationTopPositionsStreamingClient, error)
}

type applicationTopPositionClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationTopPositionClient(cc grpc.ClientConnInterface) ApplicationTopPositionClient {
	return &applicationTopPositionClient{cc}
}

func (c *applicationTopPositionClient) GetApplicationTopPositions(ctx context.Context, in *GetPositionsRequest, opts ...grpc.CallOption) (*GetPositionsResponse, error) {
	out := new(GetPositionsResponse)
	err := c.cc.Invoke(ctx, "/proto.ApplicationTopPosition/GetApplicationTopPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationTopPositionClient) GetApplicationTopPositionsStreaming(ctx context.Context, opts ...grpc.CallOption) (ApplicationTopPosition_GetApplicationTopPositionsStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationTopPosition_ServiceDesc.Streams[0], "/proto.ApplicationTopPosition/GetApplicationTopPositionsStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationTopPositionGetApplicationTopPositionsStreamingClient{stream}
	return x, nil
}

type ApplicationTopPosition_GetApplicationTopPositionsStreamingClient interface {
	Send(*GetPositionsRequest) error
	Recv() (*GetPositionsResponse, error)
	grpc.ClientStream
}

type applicationTopPositionGetApplicationTopPositionsStreamingClient struct {
	grpc.ClientStream
}

func (x *applicationTopPositionGetApplicationTopPositionsStreamingClient) Send(m *GetPositionsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationTopPositionGetApplicationTopPositionsStreamingClient) Recv() (*GetPositionsResponse, error) {
	m := new(GetPositionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationTopPositionServer is the server API for ApplicationTopPosition service.
// All implementations must embed UnimplementedApplicationTopPositionServer
// for forward compatibility
type ApplicationTopPositionServer interface {
	GetApplicationTopPositions(context.Context, *GetPositionsRequest) (*GetPositionsResponse, error)
	GetApplicationTopPositionsStreaming(ApplicationTopPosition_GetApplicationTopPositionsStreamingServer) error
	mustEmbedUnimplementedApplicationTopPositionServer()
}

// UnimplementedApplicationTopPositionServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationTopPositionServer struct {
}

func (UnimplementedApplicationTopPositionServer) GetApplicationTopPositions(context.Context, *GetPositionsRequest) (*GetPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationTopPositions not implemented")
}
func (UnimplementedApplicationTopPositionServer) GetApplicationTopPositionsStreaming(ApplicationTopPosition_GetApplicationTopPositionsStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GetApplicationTopPositionsStreaming not implemented")
}
func (UnimplementedApplicationTopPositionServer) mustEmbedUnimplementedApplicationTopPositionServer() {
}

// UnsafeApplicationTopPositionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationTopPositionServer will
// result in compilation errors.
type UnsafeApplicationTopPositionServer interface {
	mustEmbedUnimplementedApplicationTopPositionServer()
}

func RegisterApplicationTopPositionServer(s grpc.ServiceRegistrar, srv ApplicationTopPositionServer) {
	s.RegisterService(&ApplicationTopPosition_ServiceDesc, srv)
}

func _ApplicationTopPosition_GetApplicationTopPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationTopPositionServer).GetApplicationTopPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ApplicationTopPosition/GetApplicationTopPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationTopPositionServer).GetApplicationTopPositions(ctx, req.(*GetPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationTopPosition_GetApplicationTopPositionsStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationTopPositionServer).GetApplicationTopPositionsStreaming(&applicationTopPositionGetApplicationTopPositionsStreamingServer{stream})
}

type ApplicationTopPosition_GetApplicationTopPositionsStreamingServer interface {
	Send(*GetPositionsResponse) error
	Recv() (*GetPositionsRequest, error)
	grpc.ServerStream
}

type applicationTopPositionGetApplicationTopPositionsStreamingServer struct {
	grpc.ServerStream
}

func (x *applicationTopPositionGetApplicationTopPositionsStreamingServer) Send(m *GetPositionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationTopPositionGetApplicationTopPositionsStreamingServer) Recv() (*GetPositionsRequest, error) {
	m := new(GetPositionsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationTopPosition_ServiceDesc is the grpc.ServiceDesc for ApplicationTopPosition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationTopPosition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ApplicationTopPosition",
	HandlerType: (*ApplicationTopPositionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApplicationTopPositions",
			Handler:    _ApplicationTopPosition_GetApplicationTopPositions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetApplicationTopPositionsStreaming",
			Handler:       _ApplicationTopPosition_GetApplicationTopPositionsStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "apptop.proto",
}
